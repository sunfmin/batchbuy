// Generated by github.com/hypermusk/hypermusk
// DO NOT EDIT


#import "api.h"

static Api * _api;
static NSDateFormatter * _dateFormatter;

@implementation Api : NSObject
+ (Api *) get {
	if(!_api) {
		_api = [[Api alloc] init];
		if ([_api requestTimeoutInterval] == 0) {
			[_api setRequestTimeoutInterval:10];
		}
	}
	return _api;
}

+ (NSDateFormatter *) dateFormatter {
	if(!_dateFormatter) {
		_dateFormatter = [[NSDateFormatter alloc] init];
		[_dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ssZZZZ"];
	}
	return _dateFormatter;
}

+ (NSDate *) dateFromString:(NSString *)dateString {
	if(!dateString) {
		return nil;
	}

	NSError *error;
	NSRegularExpression *regexp = [NSRegularExpression regularExpressionWithPattern:@"\\.[0-9]*" options:0 error:&error];
	NSAssert(!error, @"Error in regexp");

	NSRange range = NSMakeRange(0, [dateString length]);
	dateString = [regexp stringByReplacingMatchesInString:dateString options:0 range:range withTemplate:@""];

	NSDate *date;
	[[Api dateFormatter] getObjectValue:&date forString:dateString range:nil error:&error];
	if(error) {
		if ([[Api get] verbose]) NSLog(@"Error formatting date %@: %@ (%@)", dateString, [error localizedDescription], error);
		return nil;
	}
	return date;
}

+ (NSString *) stringFromDate:(NSDate *) date {
	if(!date) {
		return nil;
	}
	NSString * dateString = [[Api dateFormatter] stringFromDate:date];
	dateString = [[[dateString substringToIndex:(dateString.length - 3)] stringByAppendingString:@":"] stringByAppendingString:[dateString substringFromIndex:(dateString.length - 2)]];
	return dateString;
}



+ (NSDictionary *) request:(NSURL*)url
		params:(NSDictionary *)params
		stream:(NSInputStream*)stream
		error:(NSError **)error
		completionHandler:(void (^)(NSDictionary *results, NSError *error))completionHandler
{

	Api * _api = [Api get];
	NSMutableURLRequest *httpRequest = [NSMutableURLRequest requestWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:[_api requestTimeoutInterval]];

	[httpRequest setHTTPMethod:@"POST"];
	NSData *requestBody;
	if (stream == nil) {
		[httpRequest setValue:@"application/json;charset=utf-8" forHTTPHeaderField:@"Content-Type"];
		requestBody = [NSJSONSerialization dataWithJSONObject:params options:NSJSONWritingPrettyPrinted error:error];
		[httpRequest setHTTPBody:requestBody];
	} else {
		[httpRequest setValue:@"application/octet-stream" forHTTPHeaderField:@"Content-Type"];
		requestBody = [NSJSONSerialization dataWithJSONObject:params options:0 error:error];
		NSData *base64RequestBodyData = [requestBody base64EncodedDataWithOptions:NSDataBase64EncodingEndLineWithLineFeed];
		NSString *paramBase64 = [[NSString alloc ] initWithBytes: [base64RequestBodyData bytes] length:[base64RequestBodyData length] encoding:NSUTF8StringEncoding];

		[httpRequest setValue:paramBase64 forHTTPHeaderField:@"X-HyperMuskStreamParams"];
		[httpRequest setHTTPBodyStream:stream];
	}
	[httpRequest setValue:@"gzip, deflate" forHTTPHeaderField:@"Accept-Encoding"];

	if([_api verbose]) {
		NSLog(@"Request: %@", [NSString stringWithUTF8String:[requestBody bytes]]);
	}

	if(*error != nil) {
		return nil;
	}

	if (completionHandler == nil) {
		NSURLResponse  *response = nil;
		NSData *returnData = [NSURLConnection sendSynchronousRequest:httpRequest returningResponse:&response error:error];
		if(*error != nil || returnData == nil) {
			return nil;
		}
		if([_api verbose]) {
			NSLog(@"Response: %@", [NSString stringWithUTF8String:[returnData bytes]]);
		}
		return [NSJSONSerialization JSONObjectWithData:returnData options:NSJSONReadingAllowFragments error:error];
	}

	NSOperationQueue *queue = [[NSOperationQueue alloc] init];
	[NSURLConnection sendAsynchronousRequest:httpRequest
				queue:queue
				completionHandler:^(NSURLResponse *response, NSData *data, NSError *connectionError) {
					NSError *blockError = nil;
					if([_api verbose]) {
						NSLog(@"Response: %@", [NSString stringWithUTF8String:[data bytes]]);
					}

					NSDictionary *results = nil;

					if (connectionError) {
					    NSLog(@"Connection Error: %@", connectionError);
					    blockError = connectionError;
					} else if (data) {
					    results = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:&blockError];
					    if (blockError) NSLog(@"Error decoding JSON: %@", blockError);
					}

					dispatch_async(dispatch_get_main_queue(), ^{
					    completionHandler(results, blockError);
					});
				}];
	return nil;

}



+ (NSError *)errorWithDictionary:(NSDictionary *)dict {
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return nil;
	}
	if ([[dict allKeys] count] == 0) {
		return nil;
	}
	NSMutableDictionary *userInfo = [NSMutableDictionary alloc];
	id reason = [dict valueForKey:@"Reason"];
	if ([reason isKindOfClass:[NSDictionary class]]) {
		userInfo = [userInfo initWithDictionary:reason];
	} else {
		userInfo = [userInfo init];
	}
	[userInfo setObject:[dict valueForKey:@"Message"] forKey:NSLocalizedDescriptionKey];

	NSString *code = [dict valueForKey:@"Code"];
	NSNumberFormatter *f = [[NSNumberFormatter alloc] init];
	[f setNumberStyle:NSNumberFormatterDecimalStyle];
	NSNumber *codeNumber = [f numberFromString:code];
	NSInteger intCode = -1;
	if (codeNumber != nil) {
		intCode = [codeNumber integerValue];
	}
	NSError *err = [NSError errorWithDomain:@"ApiError" code:intCode userInfo:userInfo];
	return err;
}

@end


// --- Product ---
@implementation Product

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setPhotoLink:[dict valueForKey:@"PhotoLink"]];
	[self setPrice:[dict valueForKey:@"Price"]];
	[self setValidFrom:[dict valueForKey:@"ValidFrom"]];
	[self setValidTo:[dict valueForKey:@"ValidTo"]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.id forKey:@"Id"];
	[dict setValue:self.name forKey:@"Name"];
	[dict setValue:self.photoLink forKey:@"PhotoLink"];
	[dict setValue:self.price forKey:@"Price"];
	[dict setValue:self.validFrom forKey:@"ValidFrom"];
	[dict setValue:self.validTo forKey:@"ValidTo"];

	return dict;
}

@end

// --- User ---
@implementation User

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setName:[dict valueForKey:@"Name"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setAvatarLink:[dict valueForKey:@"AvatarLink"]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.name forKey:@"Name"];
	[dict setValue:self.email forKey:@"Email"];
	[dict setValue:self.avatarLink forKey:@"AvatarLink"];

	return dict;
}

@end

// --- ProductInput ---
@implementation ProductInput

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setName:[dict valueForKey:@"Name"]];
	[self setPrice:[dict valueForKey:@"Price"]];
	[self setPhotoLink:[dict valueForKey:@"PhotoLink"]];
	[self setValidFrom:[dict valueForKey:@"ValidFrom"]];
	[self setValidTo:[dict valueForKey:@"ValidTo"]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.name forKey:@"Name"];
	[dict setValue:self.price forKey:@"Price"];
	[dict setValue:self.photoLink forKey:@"PhotoLink"];
	[dict setValue:self.validFrom forKey:@"ValidFrom"];
	[dict setValue:self.validTo forKey:@"ValidTo"];

	return dict;
}

@end

// --- UserInput ---
@implementation UserInput

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setName:[dict valueForKey:@"Name"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setAvatarLink:[dict valueForKey:@"AvatarLink"]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.name forKey:@"Name"];
	[dict setValue:self.email forKey:@"Email"];
	[dict setValue:self.avatarLink forKey:@"AvatarLink"];

	return dict;
}

@end

// --- Order ---
@implementation Order

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDate:[dict valueForKey:@"Date"]];

	id dictProduct = [dict valueForKey:@"Product"];
	if ([dictProduct isKindOfClass:[NSDictionary class]]){
		[self setProduct:[[Product alloc] initWithDictionary:dictProduct]];
	}

	NSMutableArray * mUsers = [[NSMutableArray alloc] init];
	NSArray * lUsers = [dict valueForKey:@"Users"];
	if ([lUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUsers) {
			[mUsers addObject: [[User alloc] initWithDictionary:d]];
		}
		[self setUsers:mUsers];
	}
	[self setCount:[dict valueForKey:@"Count"]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.date forKey:@"Date"];
	[dict setValue:[self.product dictionary] forKey:@"Product"];
	

	NSMutableArray * mUsers = [[NSMutableArray alloc] init];
	for (User * p in self.users) {
		[mUsers addObject:[p dictionary]];
	}
	[dict setValue:mUsers forKey:@"Users"];
	
	[dict setValue:self.count forKey:@"Count"];

	return dict;
}

@end


// === Interfaces ===



// --- PutProductParams ---
@implementation ServicePutProductParams : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[ProductInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.id forKey:@"Id"];
	[dict setValue:[self.input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- PutProductResults ---
@implementation ServicePutProductResults : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictProduct = [dict valueForKey:@"Product"];
	if ([dictProduct isKindOfClass:[NSDictionary class]]){
		[self setProduct:[[Product alloc] initWithDictionary:dictProduct]];
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.product dictionary] forKey:@"Product"];
	
	[dict setValue:self.err forKey:@"Err"];

	return dict;
}

@end

// --- RemoveProductParams ---
@implementation ServiceRemoveProductParams : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.id forKey:@"Id"];

	return dict;
}

@end

// --- RemoveProductResults ---
@implementation ServiceRemoveProductResults : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.err forKey:@"Err"];

	return dict;
}

@end

// --- PutUserParams ---
@implementation ServicePutUserParams : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[UserInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.email forKey:@"Email"];
	[dict setValue:[self.input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- PutUserResults ---
@implementation ServicePutUserResults : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictUser = [dict valueForKey:@"User"];
	if ([dictUser isKindOfClass:[NSDictionary class]]){
		[self setUser:[[User alloc] initWithDictionary:dictUser]];
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.user dictionary] forKey:@"User"];
	
	[dict setValue:self.err forKey:@"Err"];

	return dict;
}

@end

// --- RemoveUserParams ---
@implementation ServiceRemoveUserParams : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.email forKey:@"Email"];

	return dict;
}

@end

// --- RemoveUserResults ---
@implementation ServiceRemoveUserResults : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.err forKey:@"Err"];

	return dict;
}

@end

// --- PutOrderParams ---
@implementation ServicePutOrderParams : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDate:[dict valueForKey:@"Date"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setProductId:[dict valueForKey:@"ProductId"]];
	[self setCount:[dict valueForKey:@"Count"]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.date forKey:@"Date"];
	[dict setValue:self.email forKey:@"Email"];
	[dict setValue:self.productId forKey:@"ProductId"];
	[dict setValue:self.count forKey:@"Count"];

	return dict;
}

@end

// --- PutOrderResults ---
@implementation ServicePutOrderResults : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictOrder = [dict valueForKey:@"Order"];
	if ([dictOrder isKindOfClass:[NSDictionary class]]){
		[self setOrder:[[Order alloc] initWithDictionary:dictOrder]];
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.order dictionary] forKey:@"Order"];
	
	[dict setValue:self.err forKey:@"Err"];

	return dict;
}

@end

// --- RemoveOrderParams ---
@implementation ServiceRemoveOrderParams : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDate:[dict valueForKey:@"Date"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setProductId:[dict valueForKey:@"ProductId"]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.date forKey:@"Date"];
	[dict setValue:self.email forKey:@"Email"];
	[dict setValue:self.productId forKey:@"ProductId"];

	return dict;
}

@end

// --- RemoveOrderResults ---
@implementation ServiceRemoveOrderResults : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.err forKey:@"Err"];

	return dict;
}

@end

// --- ProductListOfDateParams ---
@implementation ServiceProductListOfDateParams : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDate:[dict valueForKey:@"Date"]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.date forKey:@"Date"];

	return dict;
}

@end

// --- ProductListOfDateResults ---
@implementation ServiceProductListOfDateResults : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mProducts = [[NSMutableArray alloc] init];
	NSArray * lProducts = [dict valueForKey:@"Products"];
	if ([lProducts isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lProducts) {
			[mProducts addObject: [[Product alloc] initWithDictionary:d]];
		}
		[self setProducts:mProducts];
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mProducts = [[NSMutableArray alloc] init];
	for (Product * p in self.products) {
		[mProducts addObject:[p dictionary]];
	}
	[dict setValue:mProducts forKey:@"Products"];
	
	[dict setValue:self.err forKey:@"Err"];

	return dict;
}

@end

// --- OrderListOfDateParams ---
@implementation ServiceOrderListOfDateParams : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDate:[dict valueForKey:@"Date"]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.date forKey:@"Date"];

	return dict;
}

@end

// --- OrderListOfDateResults ---
@implementation ServiceOrderListOfDateResults : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mOrders = [[NSMutableArray alloc] init];
	NSArray * lOrders = [dict valueForKey:@"Orders"];
	if ([lOrders isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lOrders) {
			[mOrders addObject: [[Order alloc] initWithDictionary:d]];
		}
		[self setOrders:mOrders];
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mOrders = [[NSMutableArray alloc] init];
	for (Order * p in self.orders) {
		[mOrders addObject:[p dictionary]];
	}
	[dict setValue:mOrders forKey:@"Orders"];
	
	[dict setValue:self.err forKey:@"Err"];

	return dict;
}

@end

// --- MyAvaliableProductsParams ---
@implementation ServiceMyAvaliableProductsParams : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDate:[dict valueForKey:@"Date"]];
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.date forKey:@"Date"];
	[dict setValue:self.email forKey:@"Email"];

	return dict;
}

@end

// --- MyAvaliableProductsResults ---
@implementation ServiceMyAvaliableProductsResults : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mProducts = [[NSMutableArray alloc] init];
	NSArray * lProducts = [dict valueForKey:@"Products"];
	if ([lProducts isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lProducts) {
			[mProducts addObject: [[Product alloc] initWithDictionary:d]];
		}
		[self setProducts:mProducts];
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mProducts = [[NSMutableArray alloc] init];
	for (Product * p in self.products) {
		[mProducts addObject:[p dictionary]];
	}
	[dict setValue:mProducts forKey:@"Products"];
	
	[dict setValue:self.err forKey:@"Err"];

	return dict;
}

@end

// --- MyOrdersParams ---
@implementation ServiceMyOrdersParams : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDate:[dict valueForKey:@"Date"]];
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.date forKey:@"Date"];
	[dict setValue:self.email forKey:@"Email"];

	return dict;
}

@end

// --- MyOrdersResults ---
@implementation ServiceMyOrdersResults : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mOrders = [[NSMutableArray alloc] init];
	NSArray * lOrders = [dict valueForKey:@"Orders"];
	if ([lOrders isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lOrders) {
			[mOrders addObject: [[Order alloc] initWithDictionary:d]];
		}
		[self setOrders:mOrders];
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mOrders = [[NSMutableArray alloc] init];
	for (Order * p in self.orders) {
		[mOrders addObject:[p dictionary]];
	}
	[dict setValue:mOrders forKey:@"Orders"];
	
	[dict setValue:self.err forKey:@"Err"];

	return dict;
}

@end

// --- Top3PopularProductsParams ---
@implementation ServiceTop3PopularProductsParams : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDate:[dict valueForKey:@"Date"]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.date forKey:@"Date"];

	return dict;
}

@end

// --- Top3PopularProductsResults ---
@implementation ServiceTop3PopularProductsResults : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mProducts = [[NSMutableArray alloc] init];
	NSArray * lProducts = [dict valueForKey:@"Products"];
	if ([lProducts isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lProducts) {
			[mProducts addObject: [[Product alloc] initWithDictionary:d]];
		}
		[self setProducts:mProducts];
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mProducts = [[NSMutableArray alloc] init];
	for (Product * p in self.products) {
		[mProducts addObject:[p dictionary]];
	}
	[dict setValue:mProducts forKey:@"Products"];
	
	[dict setValue:self.err forKey:@"Err"];

	return dict;
}

@end

// --- MyTop3FavouriteProductsParams ---
@implementation ServiceMyTop3FavouriteProductsParams : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setDate:[dict valueForKey:@"Date"]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.email forKey:@"Email"];
	[dict setValue:self.date forKey:@"Date"];

	return dict;
}

@end

// --- MyTop3FavouriteProductsResults ---
@implementation ServiceMyTop3FavouriteProductsResults : NSObject

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mProducts = [[NSMutableArray alloc] init];
	NSArray * lProducts = [dict valueForKey:@"Products"];
	if ([lProducts isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lProducts) {
			[mProducts addObject: [[Product alloc] initWithDictionary:d]];
		}
		[self setProducts:mProducts];
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (id)initWithCoder:(NSCoder *)decoder {
    NSDictionary *dict = [decoder decodeObjectForKey:@"dict"];

    self = [self initWithDictionary:dict];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:[self dictionary] forKey:@"dict"];
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mProducts = [[NSMutableArray alloc] init];
	for (Product * p in self.products) {
		[mProducts addObject:[p dictionary]];
	}
	[dict setValue:mProducts forKey:@"Products"];
	
	[dict setValue:self.err forKey:@"Err"];

	return dict;
}

@end



@implementation Service : NSObject

- (NSDictionary*) dictionary {
	return [NSDictionary dictionaryWithObjectsAndKeys:nil];
}


// --- PutProduct ---
- (ServicePutProductResults *) putProduct:(NSString *)id input:(ProductInput *)input {
	
	ServicePutProductResults *results = [ServicePutProductResults alloc];
	ServicePutProductParams *params = [[ServicePutProductParams alloc] init];
	[params setId:id];
	[params setInput:input];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/PutProduct.json", [_api baseURL]]];
	if([_api verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};

	NSDictionary * dict = [Api request:url params:paramsDict stream:nil error:&error completionHandler:nil];

	if(error != nil) {
		if([_api verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) putProduct:(NSString *)id input:(ProductInput *)input success:(void (^)(ServicePutProductResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		ServicePutProductParams *params = [[ServicePutProductParams alloc] init];
		[params setId:id];
		[params setInput:input];
		

		Api * _api = [Api get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/PutProduct.json", [_api baseURL]]];
		if([_api verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}
		NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};
		NSError *nilerror = nil;

		[Api request:url params:paramsDict stream:nil error:&nilerror completionHandler:^(NSDictionary *data, NSError *error) {;

			if (error && failureBlock) {
				if([_api verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
				return;
			}

			if (successBlock) {
				ServicePutProductResults *results = [ServicePutProductResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- RemoveProduct ---
- (NSError *) removeProduct:(NSString *)id {
	
	ServiceRemoveProductResults *results = [ServiceRemoveProductResults alloc];
	ServiceRemoveProductParams *params = [[ServiceRemoveProductParams alloc] init];
	[params setId:id];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/RemoveProduct.json", [_api baseURL]]];
	if([_api verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};

	NSDictionary * dict = [Api request:url params:paramsDict stream:nil error:&error completionHandler:nil];

	if(error != nil) {
		if([_api verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.err;
	}
	results = [results initWithDictionary: dict];
	
	return results.err;
}

- (void) removeProduct:(NSString *)id success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		ServiceRemoveProductParams *params = [[ServiceRemoveProductParams alloc] init];
		[params setId:id];
		

		Api * _api = [Api get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/RemoveProduct.json", [_api baseURL]]];
		if([_api verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}
		NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};
		NSError *nilerror = nil;

		[Api request:url params:paramsDict stream:nil error:&nilerror completionHandler:^(NSDictionary *data, NSError *error) {;

			if (error && failureBlock) {
				if([_api verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
				return;
			}

			if (successBlock) {
				ServiceRemoveProductResults *results = [ServiceRemoveProductResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.err);
			}
		}];
	
}

// --- PutUser ---
- (ServicePutUserResults *) putUser:(NSString *)email input:(UserInput *)input {
	
	ServicePutUserResults *results = [ServicePutUserResults alloc];
	ServicePutUserParams *params = [[ServicePutUserParams alloc] init];
	[params setEmail:email];
	[params setInput:input];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/PutUser.json", [_api baseURL]]];
	if([_api verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};

	NSDictionary * dict = [Api request:url params:paramsDict stream:nil error:&error completionHandler:nil];

	if(error != nil) {
		if([_api verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) putUser:(NSString *)email input:(UserInput *)input success:(void (^)(ServicePutUserResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		ServicePutUserParams *params = [[ServicePutUserParams alloc] init];
		[params setEmail:email];
		[params setInput:input];
		

		Api * _api = [Api get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/PutUser.json", [_api baseURL]]];
		if([_api verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}
		NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};
		NSError *nilerror = nil;

		[Api request:url params:paramsDict stream:nil error:&nilerror completionHandler:^(NSDictionary *data, NSError *error) {;

			if (error && failureBlock) {
				if([_api verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
				return;
			}

			if (successBlock) {
				ServicePutUserResults *results = [ServicePutUserResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- RemoveUser ---
- (NSError *) removeUser:(NSString *)email {
	
	ServiceRemoveUserResults *results = [ServiceRemoveUserResults alloc];
	ServiceRemoveUserParams *params = [[ServiceRemoveUserParams alloc] init];
	[params setEmail:email];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/RemoveUser.json", [_api baseURL]]];
	if([_api verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};

	NSDictionary * dict = [Api request:url params:paramsDict stream:nil error:&error completionHandler:nil];

	if(error != nil) {
		if([_api verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.err;
	}
	results = [results initWithDictionary: dict];
	
	return results.err;
}

- (void) removeUser:(NSString *)email success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		ServiceRemoveUserParams *params = [[ServiceRemoveUserParams alloc] init];
		[params setEmail:email];
		

		Api * _api = [Api get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/RemoveUser.json", [_api baseURL]]];
		if([_api verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}
		NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};
		NSError *nilerror = nil;

		[Api request:url params:paramsDict stream:nil error:&nilerror completionHandler:^(NSDictionary *data, NSError *error) {;

			if (error && failureBlock) {
				if([_api verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
				return;
			}

			if (successBlock) {
				ServiceRemoveUserResults *results = [ServiceRemoveUserResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.err);
			}
		}];
	
}

// --- PutOrder ---
- (ServicePutOrderResults *) putOrder:(NSString *)date email:(NSString *)email productId:(NSString *)productId count:(NSNumber *)count {
	
	ServicePutOrderResults *results = [ServicePutOrderResults alloc];
	ServicePutOrderParams *params = [[ServicePutOrderParams alloc] init];
	[params setDate:date];
	[params setEmail:email];
	[params setProductId:productId];
	[params setCount:count];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/PutOrder.json", [_api baseURL]]];
	if([_api verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};

	NSDictionary * dict = [Api request:url params:paramsDict stream:nil error:&error completionHandler:nil];

	if(error != nil) {
		if([_api verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) putOrder:(NSString *)date email:(NSString *)email productId:(NSString *)productId count:(NSNumber *)count success:(void (^)(ServicePutOrderResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		ServicePutOrderParams *params = [[ServicePutOrderParams alloc] init];
		[params setDate:date];
		[params setEmail:email];
		[params setProductId:productId];
		[params setCount:count];
		

		Api * _api = [Api get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/PutOrder.json", [_api baseURL]]];
		if([_api verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}
		NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};
		NSError *nilerror = nil;

		[Api request:url params:paramsDict stream:nil error:&nilerror completionHandler:^(NSDictionary *data, NSError *error) {;

			if (error && failureBlock) {
				if([_api verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
				return;
			}

			if (successBlock) {
				ServicePutOrderResults *results = [ServicePutOrderResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- RemoveOrder ---
- (NSError *) removeOrder:(NSString *)date email:(NSString *)email productId:(NSString *)productId {
	
	ServiceRemoveOrderResults *results = [ServiceRemoveOrderResults alloc];
	ServiceRemoveOrderParams *params = [[ServiceRemoveOrderParams alloc] init];
	[params setDate:date];
	[params setEmail:email];
	[params setProductId:productId];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/RemoveOrder.json", [_api baseURL]]];
	if([_api verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};

	NSDictionary * dict = [Api request:url params:paramsDict stream:nil error:&error completionHandler:nil];

	if(error != nil) {
		if([_api verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.err;
	}
	results = [results initWithDictionary: dict];
	
	return results.err;
}

- (void) removeOrder:(NSString *)date email:(NSString *)email productId:(NSString *)productId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		ServiceRemoveOrderParams *params = [[ServiceRemoveOrderParams alloc] init];
		[params setDate:date];
		[params setEmail:email];
		[params setProductId:productId];
		

		Api * _api = [Api get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/RemoveOrder.json", [_api baseURL]]];
		if([_api verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}
		NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};
		NSError *nilerror = nil;

		[Api request:url params:paramsDict stream:nil error:&nilerror completionHandler:^(NSDictionary *data, NSError *error) {;

			if (error && failureBlock) {
				if([_api verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
				return;
			}

			if (successBlock) {
				ServiceRemoveOrderResults *results = [ServiceRemoveOrderResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.err);
			}
		}];
	
}

// --- ProductListOfDate ---
- (ServiceProductListOfDateResults *) productListOfDate:(NSString *)date {
	
	ServiceProductListOfDateResults *results = [ServiceProductListOfDateResults alloc];
	ServiceProductListOfDateParams *params = [[ServiceProductListOfDateParams alloc] init];
	[params setDate:date];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/ProductListOfDate.json", [_api baseURL]]];
	if([_api verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};

	NSDictionary * dict = [Api request:url params:paramsDict stream:nil error:&error completionHandler:nil];

	if(error != nil) {
		if([_api verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) productListOfDate:(NSString *)date success:(void (^)(ServiceProductListOfDateResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		ServiceProductListOfDateParams *params = [[ServiceProductListOfDateParams alloc] init];
		[params setDate:date];
		

		Api * _api = [Api get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/ProductListOfDate.json", [_api baseURL]]];
		if([_api verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}
		NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};
		NSError *nilerror = nil;

		[Api request:url params:paramsDict stream:nil error:&nilerror completionHandler:^(NSDictionary *data, NSError *error) {;

			if (error && failureBlock) {
				if([_api verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
				return;
			}

			if (successBlock) {
				ServiceProductListOfDateResults *results = [ServiceProductListOfDateResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- OrderListOfDate ---
- (ServiceOrderListOfDateResults *) orderListOfDate:(NSString *)date {
	
	ServiceOrderListOfDateResults *results = [ServiceOrderListOfDateResults alloc];
	ServiceOrderListOfDateParams *params = [[ServiceOrderListOfDateParams alloc] init];
	[params setDate:date];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/OrderListOfDate.json", [_api baseURL]]];
	if([_api verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};

	NSDictionary * dict = [Api request:url params:paramsDict stream:nil error:&error completionHandler:nil];

	if(error != nil) {
		if([_api verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) orderListOfDate:(NSString *)date success:(void (^)(ServiceOrderListOfDateResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		ServiceOrderListOfDateParams *params = [[ServiceOrderListOfDateParams alloc] init];
		[params setDate:date];
		

		Api * _api = [Api get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/OrderListOfDate.json", [_api baseURL]]];
		if([_api verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}
		NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};
		NSError *nilerror = nil;

		[Api request:url params:paramsDict stream:nil error:&nilerror completionHandler:^(NSDictionary *data, NSError *error) {;

			if (error && failureBlock) {
				if([_api verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
				return;
			}

			if (successBlock) {
				ServiceOrderListOfDateResults *results = [ServiceOrderListOfDateResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- MyAvaliableProducts ---
- (ServiceMyAvaliableProductsResults *) myAvaliableProducts:(NSString *)date email:(NSString *)email {
	
	ServiceMyAvaliableProductsResults *results = [ServiceMyAvaliableProductsResults alloc];
	ServiceMyAvaliableProductsParams *params = [[ServiceMyAvaliableProductsParams alloc] init];
	[params setDate:date];
	[params setEmail:email];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/MyAvaliableProducts.json", [_api baseURL]]];
	if([_api verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};

	NSDictionary * dict = [Api request:url params:paramsDict stream:nil error:&error completionHandler:nil];

	if(error != nil) {
		if([_api verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) myAvaliableProducts:(NSString *)date email:(NSString *)email success:(void (^)(ServiceMyAvaliableProductsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		ServiceMyAvaliableProductsParams *params = [[ServiceMyAvaliableProductsParams alloc] init];
		[params setDate:date];
		[params setEmail:email];
		

		Api * _api = [Api get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/MyAvaliableProducts.json", [_api baseURL]]];
		if([_api verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}
		NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};
		NSError *nilerror = nil;

		[Api request:url params:paramsDict stream:nil error:&nilerror completionHandler:^(NSDictionary *data, NSError *error) {;

			if (error && failureBlock) {
				if([_api verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
				return;
			}

			if (successBlock) {
				ServiceMyAvaliableProductsResults *results = [ServiceMyAvaliableProductsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- MyOrders ---
- (ServiceMyOrdersResults *) myOrders:(NSString *)date email:(NSString *)email {
	
	ServiceMyOrdersResults *results = [ServiceMyOrdersResults alloc];
	ServiceMyOrdersParams *params = [[ServiceMyOrdersParams alloc] init];
	[params setDate:date];
	[params setEmail:email];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/MyOrders.json", [_api baseURL]]];
	if([_api verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};

	NSDictionary * dict = [Api request:url params:paramsDict stream:nil error:&error completionHandler:nil];

	if(error != nil) {
		if([_api verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) myOrders:(NSString *)date email:(NSString *)email success:(void (^)(ServiceMyOrdersResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		ServiceMyOrdersParams *params = [[ServiceMyOrdersParams alloc] init];
		[params setDate:date];
		[params setEmail:email];
		

		Api * _api = [Api get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/MyOrders.json", [_api baseURL]]];
		if([_api verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}
		NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};
		NSError *nilerror = nil;

		[Api request:url params:paramsDict stream:nil error:&nilerror completionHandler:^(NSDictionary *data, NSError *error) {;

			if (error && failureBlock) {
				if([_api verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
				return;
			}

			if (successBlock) {
				ServiceMyOrdersResults *results = [ServiceMyOrdersResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- Top3PopularProducts ---
- (ServiceTop3PopularProductsResults *) top3PopularProducts:(NSString *)date {
	
	ServiceTop3PopularProductsResults *results = [ServiceTop3PopularProductsResults alloc];
	ServiceTop3PopularProductsParams *params = [[ServiceTop3PopularProductsParams alloc] init];
	[params setDate:date];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/Top3PopularProducts.json", [_api baseURL]]];
	if([_api verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};

	NSDictionary * dict = [Api request:url params:paramsDict stream:nil error:&error completionHandler:nil];

	if(error != nil) {
		if([_api verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) top3PopularProducts:(NSString *)date success:(void (^)(ServiceTop3PopularProductsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		ServiceTop3PopularProductsParams *params = [[ServiceTop3PopularProductsParams alloc] init];
		[params setDate:date];
		

		Api * _api = [Api get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/Top3PopularProducts.json", [_api baseURL]]];
		if([_api verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}
		NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};
		NSError *nilerror = nil;

		[Api request:url params:paramsDict stream:nil error:&nilerror completionHandler:^(NSDictionary *data, NSError *error) {;

			if (error && failureBlock) {
				if([_api verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
				return;
			}

			if (successBlock) {
				ServiceTop3PopularProductsResults *results = [ServiceTop3PopularProductsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- MyTop3FavouriteProducts ---
- (ServiceMyTop3FavouriteProductsResults *) myTop3FavouriteProducts:(NSString *)email date:(NSString *)date {
	
	ServiceMyTop3FavouriteProductsResults *results = [ServiceMyTop3FavouriteProductsResults alloc];
	ServiceMyTop3FavouriteProductsParams *params = [[ServiceMyTop3FavouriteProductsParams alloc] init];
	[params setEmail:email];
	[params setDate:date];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/MyTop3FavouriteProducts.json", [_api baseURL]]];
	if([_api verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};

	NSDictionary * dict = [Api request:url params:paramsDict stream:nil error:&error completionHandler:nil];

	if(error != nil) {
		if([_api verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) myTop3FavouriteProducts:(NSString *)email date:(NSString *)date success:(void (^)(ServiceMyTop3FavouriteProductsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		ServiceMyTop3FavouriteProductsParams *params = [[ServiceMyTop3FavouriteProductsParams alloc] init];
		[params setEmail:email];
		[params setDate:date];
		

		Api * _api = [Api get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/MyTop3FavouriteProducts.json", [_api baseURL]]];
		if([_api verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}
		NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};
		NSError *nilerror = nil;

		[Api request:url params:paramsDict stream:nil error:&nilerror completionHandler:^(NSDictionary *data, NSError *error) {;

			if (error && failureBlock) {
				if([_api verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
				return;
			}

			if (successBlock) {
				ServiceMyTop3FavouriteProductsResults *results = [ServiceMyTop3FavouriteProductsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}
@end

