// Generated by github.com/hypermusk/hypermusk
// DO NOT EDIT


#import "api.h"

static Api * _api;
static NSDateFormatter * _dateFormatter;

@implementation Api : NSObject
+ (Api *) get {
	if(!_api) {
		_api = [[Api alloc] init];
	}
	return _api;
}

+ (NSDateFormatter *) dateFormatter {
	if(!_dateFormatter) {
		_dateFormatter = [[NSDateFormatter alloc] init];
		[_dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ssZZZZ"];
	}
	return _dateFormatter;
}

+ (NSDate *) dateFromString:(NSString *)dateString {
	if(!dateString) {
		return nil;
	}

	NSError *error;
	NSRegularExpression *regexp = [NSRegularExpression regularExpressionWithPattern:@"\\.[0-9]*" options:0 error:&error];
	NSAssert(!error, @"Error in regexp");

	NSRange range = NSMakeRange(0, [dateString length]);
	dateString = [regexp stringByReplacingMatchesInString:dateString options:0 range:range withTemplate:@""];

	NSDate *date;
	[[Api dateFormatter] getObjectValue:&date forString:dateString range:nil error:&error];
	if(error) {
		if ([[Api get] Verbose]) NSLog(@"Error formatting date %@: %@ (%@)", dateString, [error localizedDescription], error);
		return nil;
	}
	return date;
}

+ (NSString *) stringFromDate:(NSDate *) date {
	if(!date) {
		return nil;
	}
	NSString * dateString = [[Api dateFormatter] stringFromDate:date];
	dateString = [[[dateString substringToIndex:(dateString.length - 3)] stringByAppendingString:@":"] stringByAppendingString:[dateString substringFromIndex:(dateString.length - 2)]];
	return dateString;
}

+ (NSDictionary *) request:(NSURL*)url req:(NSDictionary *)req error:(NSError **)error {
	NSMutableURLRequest *httpRequest = [NSMutableURLRequest requestWithURL:url];
	[httpRequest setHTTPMethod:@"POST"];
	[httpRequest setValue:@"application/json;charset=utf-8" forHTTPHeaderField:@"Content-Type"];
	Api * _api = [Api get];
	NSData *requestBody = [NSJSONSerialization dataWithJSONObject:req options:NSJSONWritingPrettyPrinted error:error];
	if([_api Verbose]) {
		NSLog(@"Request: %@", [NSString stringWithUTF8String:[requestBody bytes]]);
	}
	[httpRequest setHTTPBody:requestBody];
	if(*error != nil) {
		return nil;
	}
	NSURLResponse  *response = nil;
	NSData *returnData = [NSURLConnection sendSynchronousRequest:httpRequest returningResponse:&response error:error];
	if(*error != nil || returnData == nil) {
		return nil;
	}
	if([_api Verbose]) {
		NSLog(@"Response: %@", [NSString stringWithUTF8String:[returnData bytes]]);
	}
	return [NSJSONSerialization JSONObjectWithData:returnData options:NSJSONReadingAllowFragments error:error];
}

+ (NSError *)errorWithDictionary:(NSDictionary *)dict {
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return nil;
	}
	if ([[dict allKeys] count] == 0) {
		return nil;
	}
	NSMutableDictionary *userInfo = [NSMutableDictionary alloc];
	id reason = [dict valueForKey:@"Reason"];
	if ([reason isKindOfClass:[NSDictionary class]]) {
		userInfo = [userInfo initWithDictionary:reason];
	} else {
		userInfo = [userInfo init];
	}
	[userInfo setObject:[dict valueForKey:@"Message"] forKey:NSLocalizedDescriptionKey];

	NSString *code = [dict valueForKey:@"Code"];
	NSNumberFormatter *f = [[NSNumberFormatter alloc] init];
	[f setNumberStyle:NSNumberFormatterDecimalStyle];
	NSNumber *codeNumber = [f numberFromString:code];
	NSInteger intCode = -1;
	if (codeNumber != nil) {
		intCode = [codeNumber integerValue];
	}
	NSError *err = [NSError errorWithDomain:@"ApiError" code:intCode userInfo:userInfo];
	return err;
}

@end


// --- Product ---
@implementation Product

@synthesize Id;
@synthesize Name;
@synthesize PhotoLink;
@synthesize Price;
@synthesize ValidFrom;
@synthesize ValidTo;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setPhotoLink:[dict valueForKey:@"PhotoLink"]];
	[self setPrice:[dict valueForKey:@"Price"]];
	[self setValidFrom:[dict valueForKey:@"ValidFrom"]];
	[self setValidTo:[dict valueForKey:@"ValidTo"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.PhotoLink forKey:@"PhotoLink"];
	[dict setValue:self.Price forKey:@"Price"];
	[dict setValue:self.ValidFrom forKey:@"ValidFrom"];
	[dict setValue:self.ValidTo forKey:@"ValidTo"];

	return dict;
}

@end

// --- User ---
@implementation User

@synthesize Name;
@synthesize Email;
@synthesize AvatarLink;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setName:[dict valueForKey:@"Name"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setAvatarLink:[dict valueForKey:@"AvatarLink"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.AvatarLink forKey:@"AvatarLink"];

	return dict;
}

@end

// --- ProductInput ---
@implementation ProductInput

@synthesize Name;
@synthesize Price;
@synthesize PhotoLink;
@synthesize ValidFrom;
@synthesize ValidTo;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setName:[dict valueForKey:@"Name"]];
	[self setPrice:[dict valueForKey:@"Price"]];
	[self setPhotoLink:[dict valueForKey:@"PhotoLink"]];
	[self setValidFrom:[dict valueForKey:@"ValidFrom"]];
	[self setValidTo:[dict valueForKey:@"ValidTo"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.Price forKey:@"Price"];
	[dict setValue:self.PhotoLink forKey:@"PhotoLink"];
	[dict setValue:self.ValidFrom forKey:@"ValidFrom"];
	[dict setValue:self.ValidTo forKey:@"ValidTo"];

	return dict;
}

@end

// --- UserInput ---
@implementation UserInput

@synthesize Name;
@synthesize Email;
@synthesize AvatarLink;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setName:[dict valueForKey:@"Name"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setAvatarLink:[dict valueForKey:@"AvatarLink"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.AvatarLink forKey:@"AvatarLink"];

	return dict;
}

@end

// --- Order ---
@implementation Order

@synthesize Date;
@synthesize Product;
@synthesize Users;
@synthesize Count;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDate:[dict valueForKey:@"Date"]];

	id dictProduct = [dict valueForKey:@"Product"];
	if ([dictProduct isKindOfClass:[NSDictionary class]]){
		[self setProduct:[[Product alloc] initWithDictionary:dictProduct]];
	}

	NSMutableArray * mUsers = [[NSMutableArray alloc] init];
	NSArray * lUsers = [dict valueForKey:@"Users"];
	if ([lUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUsers) {
			[mUsers addObject: [[User alloc] initWithDictionary:d]];
		}
		[self setUsers:mUsers];
	}
	[self setCount:[dict valueForKey:@"Count"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Date forKey:@"Date"];
	[dict setValue:[self.Product dictionary] forKey:@"Product"];
	

	NSMutableArray * mUsers = [[NSMutableArray alloc] init];
	for (User * p in Users) {
		[mUsers addObject:[p dictionary]];
	}
	[dict setValue:mUsers forKey:@"Users"];
	
	[dict setValue:self.Count forKey:@"Count"];

	return dict;
}

@end


// === Interfaces ===



// --- PutProductParams ---
@implementation ServicePutProductParams : NSObject

@synthesize Id;
@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[ProductInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- PutProductResults ---
@implementation ServicePutProductResults : NSObject

@synthesize Product;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictProduct = [dict valueForKey:@"Product"];
	if ([dictProduct isKindOfClass:[NSDictionary class]]){
		[self setProduct:[[Product alloc] initWithDictionary:dictProduct]];
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Product dictionary] forKey:@"Product"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- RemoveProductParams ---
@implementation ServiceRemoveProductParams : NSObject

@synthesize Id;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];

	return dict;
}

@end

// --- RemoveProductResults ---
@implementation ServiceRemoveProductResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- PutUserParams ---
@implementation ServicePutUserParams : NSObject

@synthesize Email;
@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[UserInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- PutUserResults ---
@implementation ServicePutUserResults : NSObject

@synthesize User;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictUser = [dict valueForKey:@"User"];
	if ([dictUser isKindOfClass:[NSDictionary class]]){
		[self setUser:[[User alloc] initWithDictionary:dictUser]];
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.User dictionary] forKey:@"User"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- RemoveUserParams ---
@implementation ServiceRemoveUserParams : NSObject

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- RemoveUserResults ---
@implementation ServiceRemoveUserResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- PutOrderParams ---
@implementation ServicePutOrderParams : NSObject

@synthesize Date;
@synthesize Email;
@synthesize ProductId;
@synthesize Count;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDate:[dict valueForKey:@"Date"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setProductId:[dict valueForKey:@"ProductId"]];
	[self setCount:[dict valueForKey:@"Count"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Date forKey:@"Date"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.ProductId forKey:@"ProductId"];
	[dict setValue:self.Count forKey:@"Count"];

	return dict;
}

@end

// --- PutOrderResults ---
@implementation ServicePutOrderResults : NSObject

@synthesize Order;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictOrder = [dict valueForKey:@"Order"];
	if ([dictOrder isKindOfClass:[NSDictionary class]]){
		[self setOrder:[[Order alloc] initWithDictionary:dictOrder]];
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Order dictionary] forKey:@"Order"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- RemoveOrderParams ---
@implementation ServiceRemoveOrderParams : NSObject

@synthesize Date;
@synthesize Email;
@synthesize ProductId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDate:[dict valueForKey:@"Date"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setProductId:[dict valueForKey:@"ProductId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Date forKey:@"Date"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.ProductId forKey:@"ProductId"];

	return dict;
}

@end

// --- RemoveOrderResults ---
@implementation ServiceRemoveOrderResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- ProductListOfDateParams ---
@implementation ServiceProductListOfDateParams : NSObject

@synthesize Date;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDate:[dict valueForKey:@"Date"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Date forKey:@"Date"];

	return dict;
}

@end

// --- ProductListOfDateResults ---
@implementation ServiceProductListOfDateResults : NSObject

@synthesize Products;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mProducts = [[NSMutableArray alloc] init];
	NSArray * lProducts = [dict valueForKey:@"Products"];
	if ([lProducts isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lProducts) {
			[mProducts addObject: [[Product alloc] initWithDictionary:d]];
		}
		[self setProducts:mProducts];
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mProducts = [[NSMutableArray alloc] init];
	for (Product * p in Products) {
		[mProducts addObject:[p dictionary]];
	}
	[dict setValue:mProducts forKey:@"Products"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- OrderListOfDateParams ---
@implementation ServiceOrderListOfDateParams : NSObject

@synthesize Date;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDate:[dict valueForKey:@"Date"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Date forKey:@"Date"];

	return dict;
}

@end

// --- OrderListOfDateResults ---
@implementation ServiceOrderListOfDateResults : NSObject

@synthesize Orders;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mOrders = [[NSMutableArray alloc] init];
	NSArray * lOrders = [dict valueForKey:@"Orders"];
	if ([lOrders isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lOrders) {
			[mOrders addObject: [[Order alloc] initWithDictionary:d]];
		}
		[self setOrders:mOrders];
	}
	[self setErr:[Api errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mOrders = [[NSMutableArray alloc] init];
	for (Order * p in Orders) {
		[mOrders addObject:[p dictionary]];
	}
	[dict setValue:mOrders forKey:@"Orders"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end



@implementation Service : NSObject

- (NSDictionary*) dictionary {
	return [NSDictionary dictionaryWithObjectsAndKeys:nil];
}


// --- PutProduct ---
- (ServicePutProductResults *) PutProduct:(NSString *)id input:(ProductInput *)input {
	
	ServicePutProductResults *results = [ServicePutProductResults alloc];
	ServicePutProductParams *params = [[ServicePutProductParams alloc] init];
	[params setId:id];
	[params setInput:input];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/PutProduct.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [Api request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- RemoveProduct ---
- (NSError *) RemoveProduct:(NSString *)id {
	
	ServiceRemoveProductResults *results = [ServiceRemoveProductResults alloc];
	ServiceRemoveProductParams *params = [[ServiceRemoveProductParams alloc] init];
	[params setId:id];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/RemoveProduct.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [Api request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- PutUser ---
- (ServicePutUserResults *) PutUser:(NSString *)email input:(UserInput *)input {
	
	ServicePutUserResults *results = [ServicePutUserResults alloc];
	ServicePutUserParams *params = [[ServicePutUserParams alloc] init];
	[params setEmail:email];
	[params setInput:input];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/PutUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [Api request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- RemoveUser ---
- (NSError *) RemoveUser:(NSString *)email {
	
	ServiceRemoveUserResults *results = [ServiceRemoveUserResults alloc];
	ServiceRemoveUserParams *params = [[ServiceRemoveUserParams alloc] init];
	[params setEmail:email];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/RemoveUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [Api request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- PutOrder ---
- (ServicePutOrderResults *) PutOrder:(NSString *)date email:(NSString *)email productId:(NSString *)productId count:(NSNumber *)count {
	
	ServicePutOrderResults *results = [ServicePutOrderResults alloc];
	ServicePutOrderParams *params = [[ServicePutOrderParams alloc] init];
	[params setDate:date];
	[params setEmail:email];
	[params setProductId:productId];
	[params setCount:count];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/PutOrder.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [Api request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- RemoveOrder ---
- (NSError *) RemoveOrder:(NSString *)date email:(NSString *)email productId:(NSString *)productId {
	
	ServiceRemoveOrderResults *results = [ServiceRemoveOrderResults alloc];
	ServiceRemoveOrderParams *params = [[ServiceRemoveOrderParams alloc] init];
	[params setDate:date];
	[params setEmail:email];
	[params setProductId:productId];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/RemoveOrder.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [Api request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- ProductListOfDate ---
- (ServiceProductListOfDateResults *) ProductListOfDate:(NSString *)date {
	
	ServiceProductListOfDateResults *results = [ServiceProductListOfDateResults alloc];
	ServiceProductListOfDateParams *params = [[ServiceProductListOfDateParams alloc] init];
	[params setDate:date];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/ProductListOfDate.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [Api request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- OrderListOfDate ---
- (ServiceOrderListOfDateResults *) OrderListOfDate:(NSString *)date {
	
	ServiceOrderListOfDateResults *results = [ServiceOrderListOfDateResults alloc];
	ServiceOrderListOfDateParams *params = [[ServiceOrderListOfDateParams alloc] init];
	[params setDate:date];
	
	Api * _api = [Api get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/Service/OrderListOfDate.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [Api request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}
@end



